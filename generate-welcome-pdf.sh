#!/bin/bash
# generate-welcome-pdf.sh
# Usage: ./generate-welcome-pdf.sh [markdown_file]
# If no markdown_file is given, it will generate one from _posts/.

set -e

POSTS_DIR="_posts"
ASSETS_DIR="assets"
MD_FILE="$ASSETS_DIR/welcome-email-full.md"
HTML_FILE="$ASSETS_DIR/welcome-email-full.html"
PDF_FILE="$ASSETS_DIR/welcome-email-full.pdf"
CSS_FILE="$ASSETS_DIR/welcome-pdf.css"

# Helper: print error and exit
fail() {
  echo "Error: $1" >&2
  exit 1
}

# 1. Generate Markdown if not provided and not '--'
if [ -n "$1" ] && [ "$1" != "--" ]; then
  if [ ! -f "$1" ]; then
    fail "Provided markdown file '$1' does not exist."
  fi
  MD_FILE="$1"
else
  # Check for posts
  if ! ls $POSTS_DIR/*.md 1> /dev/null 2>&1; then
    fail "No markdown posts found in $POSTS_DIR."
  fi
  echo "Generating $MD_FILE from posts..."
  # Add a comment at the top of the Markdown file
  printf '<!-- Auto-generated by generate-welcome-pdf.sh -->\n' > "$MD_FILE"
  # Write header (no YAML front matter or ---)
  printf '# Welcome to the Newsletter goodies!\n\n' >> "$MD_FILE"
  printf 'Hi there,\n\n' >> "$MD_FILE"
  printf 'Thank you for subscribing to my weekly newsletter! Iâ€™m Andrei Ciuculescu, a Laravel backend developer and DevOps specialist.\nThis PDF contains a curated selection of my best articles, packed with practical tips and insights for modern PHP and Laravel development.\nI hope you find them useful and inspiring!\n\n' >> "$MD_FILE"
  printf '## Table of Contents\n' >> "$MD_FILE"
  i=1
  for post in $(ls $POSTS_DIR/*.md | sort); do
    # Check if the post has the 'welcome-email' tag
    if grep -q '^tags:.*welcome-email' "$post"; then
      title=$(grep '^title:' "$post" | sed 's/title: //;s/"//g')
      anchor=$(echo "$title" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g;s/[^a-z0-9-]//g')
      printf '%d. [%s](#%s)\n' "$i" "$title" "$anchor" >> "$MD_FILE"
      i=$((i+1))
    fi
  done
  printf '\n' >> "$MD_FILE"
  for post in $(ls $POSTS_DIR/*.md | sort); do
    # Check if the post has the 'welcome-email' tag
    if grep -q '^tags:.*welcome-email' "$post"; then
      title=$(grep '^title:' "$post" | sed 's/title: //;s/"//g')
      date=$(grep '^date:' "$post" | sed 's/date: //')
      printf '\n# %s\n\n' "$title" >> "$MD_FILE"
      printf '*%s*\n\n' "$date" >> "$MD_FILE"
      # Extract content after the second --- (skip YAML front matter), remove leading spaces from headers
      awk 'BEGIN{c=0} /^---/{c++} c==2{print}' "$post" | tail -n +2 | sed '/^---$/d;s/^ *##/##/' >> "$MD_FILE"
      printf '\n' >> "$MD_FILE"
    fi
  done
  # Ensure Unix line endings
  if command -v dos2unix >/dev/null 2>&1; then
    dos2unix "$MD_FILE"
  fi
fi

# 2. Convert Markdown to HTML with Pandoc, add header/footer, and fix CSS path
CSS_ABS_PATH="$(realpath "$CSS_FILE")"
PANDOC_HEADER='<header><h1>Welcome to the Newsletter</h1></header>'
PANDOC_FOOTER='<footer><hr><p>Generated on '"$(date +%Y-%m-%d)"' by Andrei Ciuculescu</p></footer>'

pandoc "$MD_FILE" -s --from gfm --metadata pagetitle="Welcome to the Newsletter" --css="file://$CSS_ABS_PATH"  -A <(echo "$PANDOC_FOOTER") -o "$HTML_FILE"

# 3. Prettify HTML (if prettier is available)
if command -v prettier >/dev/null 2>&1; then
  prettier --write "$HTML_FILE"
fi

# 4. Prettify Markdown (if markdownlint is available)
if command -v markdownlint >/dev/null 2>&1; then
  markdownlint --fix "$MD_FILE"
fi

# 5. Convert HTML to PDF with WeasyPrint
weasyprint "$HTML_FILE" "$PDF_FILE"

echo "PDF generated at $PDF_FILE"
